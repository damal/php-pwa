<?php
/*==================================================================================================
--------------------------------
Модуль	: Ядро платформы
Описание: Основные функции: работа с базой данных
Версия	: 1.0.0/ALPHA
Дата	: 2012-05-13
Автор	: Станислав В. Третьяков
--------------------------------
==================================================================================================*/



trait Core_Trait_DBUtils{


	/*==============================================================================================
	Функции
	==============================================================================================*/



	/*
	 * Сопоставление массива правил с заданным массивом атрибутов
	 * 
	 * $rules - Массив правил, имеет следующий вид:
	 * array(
	 * 		array(
	 * 			'key' => 'user_login',
	 * 			'value' => 'admin',
	 * 			'operator' => 'CLIKE'
	 * 		),
	 * 		array(
	 * 			'key' => 'user_id',
	 * 			'value' => array(1,4,6,55,333)
	 * 		)
	 * )
	 * 
	 * $attrs - ассоциированный массив атрибутов, которые будут сравниваться
	 * 
	 * Возвращает TRUE если все правила удовлетворяют заданным условиям, правила сравниваются по принципу AND
	 * Если массив аттрибутов $attrs не задан или массив правил не задан - вернется FALSE
	 * Если аттрибут не найден в массиве $attrs - вернется FALSE
	 */
	static public function compareRulesArray($rules=array(), $attrs=array()){

		if(empty($rules)||empty($attrs)) return false;

		foreach($rules as $rule){
			if(!isset($rule['key'])) return false;
			if(!isset($rule['value'])) return false;
			if(!isset($attrs[$rule['key']])) return false; #аттрибут не найден в массиве $attrs
			if(!isset($rule['operator'])) $rule['operator'] = '=';
			if(self::compareRuleElement($attrs[$rule['key']], $rule['value'], $rule['operator']) === false) return false;
		}

		return true;
	}#end function



	/*
	 * Сопоставление заданных значений по указанному оператору сравнения
	 * 
	 * $attr		-	атрибут, который будет сравниваться
	 * 
	 * $value		-	Значение, сравниваемое со значением атрибута, 
	 * 					если значение задано массивом, тогда правило сработает если один из элементов массива 
	 * 			 		соответствует значению аттрибута (по принципу OR)
	 * 					Если задан оператор "!=","<>", то правило сработает если все элементы массива 
	 * 					не соответствуют значению аттрибута (по принципу AND)
	 * 
	 * $operator 	- 	Оператор, применяемый для выполнения сравнения, возможные операторы:
	 * 			"="				- РАВНО, правило сработает если текстовые строки или числовые значения равны, используется по-умолчанию
	 * 			"!=","<>"		- НЕ РАВНО, правило сработает если текстовые строки или числовые значения НЕ равны
	 * 			">"				- БОЛЬШЕ, правило сработает если аттрибут больше value
	 * 			"<"				- МЕНЬШЕ, правило сработает если аттрибут меньше value
	 * 			">="			- БОЛЬШЕ ИЛИ РАВНО, правило сработает если аттрибут больше или равен value
	 * 			"<="			- МЕНЬШЕ ИЛИ РАВНО, правило сработает если аттрибут меньше или равен value
	 * 			"LIKE"			- СООТВЕТСТВУЕТ без учета регистра, сравнение текстовых значений через strcasecmp(), правило сработает если строки идентичны
	 * 			"LIKE%"			- НАЧИНАЕТСЯ С без учета регистра, правило сработает если аттрибут начинается со значения value
	 * 			"%LIKE"			- ЗАКАНЧИВАЕТСЯ без учета регистра, правило сработает если аттрибут заканчивается значением value
	 * 			"%LIKE%"		- СОДЕРЖИТ без учета регистра, правило сработает если аттрибут содержит значение value
	 * 			"CLIKE"			- СООТВЕТСТВУЕТ с учетом регистра, сравнение текстовых значений через strcmp(), правило сработает если строки идентичны
	 * 			"CLIKE%"		- НАЧИНАЕТСЯ С с учетом регистра, правило сработает если аттрибут начинается со значения value
	 * 			"%CLIKE"		- ЗАКАНЧИВАЕТСЯ с учетом регистра, правило сработает если аттрибут заканчивается значением value
	 * 			"%CLIKE%"		- СОДЕРЖИТ с учетом регистра, правило сработает если аттрибут содержит значение value
	 * 
	 * Возвращает TRUE если атрибут и значение удовлетворяют заданному условию, в противном случае возвращается FALSE
	 */
	static public function compareRuleElement($attr, $value, $operator='='){

		#Если значение задано массивом
		if(is_array($value)){
			if($operator != '!=' && $operator != '<>'){
				$result = false;
				foreach($value as $item) if(self::compareRuleElement($attr, $item, $operator) !== false) $result = true;
			}else{
				$result = true;
				foreach($value as $item) if(self::compareRuleElement($attr, $item, $operator) === false) $result = false;
			}
			return $result;
		}#Если значение задано массивом

		switch(strtoupper($operator)){

			#РАВНО, правило сработает если текстовые строки или числовые значения равны, используется по-умолчанию
			case '=': return ($attr == $value);

			#HЕ РАВНО, правило сработает если текстовые строки или числовые значения НЕ равны
			case '!=':
			case '<>': return ($attr != $value);

			#БОЛЬШЕ, правило сработает если аттрибут пользователя больше value
			case '>': return ($attr > $value);

			#МЕНЬШЕ, правило сработает если аттрибут пользователя меньше value
			case '<': return ($attr < $value);

			#БОЛЬШЕ ИЛИ РАВНО, правило сработает если аттрибут больше или равен value
			case '>=': return ($attr >= $value);

			#МЕНЬШЕ ИЛИ РАВНО, правило сработает если аттрибут меньше или равен value
			case '<=': return ($attr <= $value);

			#СООТВЕТСТВУЕТ без учета регистра, сравнение текстовых значений через strcasecmp(), правило сработает если строки идентичны
			case 'LIKE': return (strcasecmp($attr,$value) === 0);

			#СООТВЕТСТВУЕТ с учетом регистра, сравнение текстовых значений через strcmp(), правило сработает если строки идентичны
			case 'CLIKE': return (strcmp($attr,$value) === 0);

			#НАЧИНАЕТСЯ С без учета регистра, правило сработает если аттрибут начинается со значения value
			case 'LIKE%': return (stripos($attr,$value) === 0);

			#НАЧИНАЕТСЯ С с учетом регистра, правило сработает если аттрибут начинается со значения value
			case 'CLIKE%': return (strpos($attr,$value) === 0);

			#ЗАКАНЧИВАЕТСЯ без учета регистра, правило сработает если аттрибут заканчивается значением value
			case '%LIKE': return (stripos(strrev($attr), strrev($value)) === 0);

			#ЗАКАНЧИВАЕТСЯ с учетом регистра, правило сработает если аттрибут заканчивается значением value
			case '%CLIKE': return (strpos(strrev($attr), strrev($value)) === 0);

			#СОДЕРЖИТ без учета регистра, правило сработает если аттрибут содержит значение value
			case '%LIKE%': return (stripos($attr,$value) !== false);

			#СОДЕРЖИТ с учетом регистра, правило сработает если аттрибут содержит значение value
			case '%CLIKE%': return (strpos($attr,$value) !== false);

			default: return false;
		}

	}#end function






}#end class


?>