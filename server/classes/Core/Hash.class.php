<?php
/*==================================================================================================
--------------------------------
Модуль	: Ядро платформы
Описание: Класс работы с контрольными суммами
Версия	: 1.0.0/ALPHA
Дата	: 2012-04-20
Автор	: Станислав В. Третьяков
--------------------------------
==================================================================================================*/



class Hash{

	use Core_Trait_SingletonUnique;

	/*==============================================================================================
	Переменные класса
	==============================================================================================*/

	private $options = array(

		'black_fields'	=> array('hash'),			#Список игнорируемых полей, которые не участвуют в расчете контрольной суммы
		'connection' 	=> 'main',					#OpenSSL RSA соединение

		#NULL
		'null'=>null
	);


	public $last_algo = '';	#Название алгоритма (сертификата), использованного для вычисления хеш суммы

	#Массив описаний ошибок:
	#Каждая запись состоит из массива, содержащего
	#идентификатор генерируемого события и описание ошибки
	#события с идентификатором 0, NULL, FALSE, '' - не обрабатываются
	#Идентификаторы событий могут быть заданы в виде чисел (12,34,0xCC9087) или строк ('test_event','my_event')
	static protected $errors = array(
		#Системные ошибки, от 1 до 99
		0	=> array(0, 'Нет ошибки'),
		1	=> array(EVENT_PHP_ERROR, 'Вызов недопустимого метода или функции класса'),
	);

	#Информация о классе
	static protected $class_about = array(
		'module'	=> 'Core',
		'namespace'	=> __NAMESPACE__,
		'class'		=> __CLASS__,
		'file'		=> __FILE__,
		'log_file'	=> 'Core/Database'
	);



	/*==============================================================================================
	Инициализация
	==============================================================================================*/



	#--------------------------------------------------
	# Конструктор класса
	#--------------------------------------------------
	private function init($options = null){

		#Применение пользовательских опций
		if(is_array($options)) $this->options = array_merge($this->options, $options);

	}#end function



	#--------------------------------------------------
	# Деструктор класса
	#--------------------------------------------------
	public function __destruct(){

	}#end function








	/*==============================================================================================
	Функции: работа с Hash
	==============================================================================================*/



	/**
	 * Возвращает Hash строки
	 * 
	 * Входные параметры:
	 * $data(*) - строка или ассоциированный массив полей, которые нужно преобразовать для рассчета контрорльной суммы
	 * $white - массив полей по белому списку, только их значения учавствуют в результирующей строке
	 * черный список имеет приоритет над белым (если в черном и белом списках есть поле "hash", оно не будет учтено в результирующей строке)
	 * $black - массив полей по черному списку, будет добавлен к текущему черному списку в рамках выполнения текущей функции
	 * $rsa - имя сертификата, который надо использовать для вычисления контрольной суммы, если не задан, используется сертификат,
	 * заданный по-умолчанию в настройке x509_sign_default конфигурационного файла Core/main
	 * $rsa_prefix - признак, указывающий на необходимость возврата контрольной суммы с префиксом 
	 * в качестве имени сертификата или алгоритма, используемого для вычисления контрольной суммы
	 * 
	 * Функция возвращает контрольную сумму строки
	 */
	public function getHash($data=null, $white = null, $black = null, $rsa=null, $rsa_prefix=true){

		//if(empty($data)) return false;
		$data = (is_array($data) ? $this->toString($data, $white, $black) : (string)$data);

		/*
		 * Получение названия сертификата для вычисления контрольной суммы
		 * Специальные наименования: 
		 * sha1 - расчет контрольной суммы без использования RSA по алгоритму SHA1
		 * md5 - расчет контрольной суммы без использования RSA по алгоритму MD5
		 * crc32 - расчет контрольной суммы без использования RSA по алгоритму CRC32
		 */
		if(empty($rsa)){
			$rsa=Config::getOption('Core/main','x509_sign_default');
		}

		$this->last_algo = $rsa;
		$rsa_prefix = (!$rsa_prefix ? '' : $rsa.'-');

		switch($rsa){
			case 'sha1':
				return $rsa_prefix .sha1($data);
			case 'md5':
				return $rsa_prefix .md5($data);
			case 'crc32':
				return $rsa_prefix .crc32($data);
			default:
				if( ($sign = Core_OpenSSL_RSA::getInstance($rsa)->sign($data))===false) return false;
				return $rsa_prefix .sha1($sign);
		}
	}#end function




	/*
	#--------------------------------------------------
	# Преобразует массив в строку для расчета Hash
	#--------------------------------------------------
	#
	# Входные параметры:
	# $arr(*) - ассоциированный массив полей, которые нужно преобразовать для рассчета контрорльной суммы
	# $white - массив полей по белому списку, только их значения учавствуют в результирующей строке
	#          черный список имеет приоритет над белым (если в черном и белом списках есть поле "hash", оно не будет учтено в результирующей строке)
	# $black - массив полей по черному списку, будет добавлен к текущему черному списку в рамках выполнения текущей функции
	# 
	# Функция возвращает строку, пригодную для вычисления контрольной суммы
	*/
	public function toString($arr = null, $white = null, $black = null){

		if(empty($arr)||!is_array($arr)) return '';
		$use_white = (!empty($white)&&is_array($white));
		$use_black = (!empty($black)&&is_array($black));


		$result = '';
		foreach($arr as $key=>$value){
			#Проверка на наличее в списке игнорируемых полей, которые не участвуют в расчете контрольной суммы
			if(in_array($key, $this->options['black_fields'], true)) continue;
			if($use_black&&in_array($key,$black)) continue;
			if(!$use_white || ($use_white&&in_array($key,$white))){
				$result.= (is_array($value)? $this->toString($value, $white, $black) : (string)$value);
			}
		}

		return $result;
	}#end function



	/*
	#--------------------------------------------------
	# Сравнивает вычисленный Hash строки и заданный Hash
	#--------------------------------------------------
	#
	# Входные параметры:
	# hash (*) - контрольная сумма, которую надо сравнить и вычисляемой контрольной суммой
	# $data(*) - строка или ассоциированный массив полей, которые нужно преобразовать для рассчета контрорльной суммы
	# $white - массив полей по белому списку, только их значения учавствуют в результирующей строке
	#          черный список имеет приоритет над белым (если в черном и белом списках есть поле "hash", оно не будет учтено в результирующей строке)
	# $black - массив полей по черному списку, будет добавлен к текущему черному списку в рамках выполнения текущей функции
	* $rsa - имя сертификата, который надо использовать для вычисления контрольной суммы
	# 
	# Функция возвращает TRUE если указанная и рассчетная контрольные суммы совпадают
	*/
	public function checkHash($hash = '', $data=null, $white = null, $black = null, $rsa=null){

		if(empty($hash)) return false;
		$hasha = (strpos($hash,'-')) ? explode('-',$hash) : false;

		$hash2 = (!$hasha ? $this->getHash($data, $white, $black, $rsa) : $this->getHash($data, $white, $black, $hasha[0]));
		if($hash2 === false) return false;

		return $this->compareHash($hash,$hash2);

	}#end function



	/*
	#--------------------------------------------------
	# Сопоставляет два Hash
	#--------------------------------------------------
	#
	# Входные параметры:
	# hash1 (*) - контрольная сумма, которую надо сравнить и вычисляемой контрольной суммой
	# hash2 (*) - контрольная сумма, которую надо сравнить и вычисляемой контрольной суммой
	# 
	# Функция возвращает TRUE если контрольные суммы совпадают
	*/
	public function compareHash($hash1 = '', $hash2 = ''){

		if(empty($hash1)||empty($hash2)) return false;

		return (strcmp($hash1, $hash2)==0 ? true : false);

	}#end function




}#end class




?>